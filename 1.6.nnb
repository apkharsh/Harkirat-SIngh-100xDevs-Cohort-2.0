{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "<!-- Old way to write callbacks -->"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const fs = require('fs');\r\n\r\n// my own asynchronuos function\r\nfunction harshReads(cb){\r\n    fs.readFile('data.txt', 'utf8', (err, data) => {\r\n        if(err) throw err;\r\n        cb(data);\r\n    });\r\n}\r\n\r\n// callback function to call\r\nfunction callback(data){\r\n    console.log(data);\r\n}\r\n\r\n// calling the function\r\nharshReads(callback);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<!-- new way to write callbacks -->"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const fs = require('fs');\r\n\r\n// my own asynchronuos function\r\nfunction harshReads(){\r\n    return new Promise((resolve, reject) => {\r\n        fs.readFile('data.txt', 'utf8', (err, data) => {\r\n            if(err) reject(err);\r\n            resolve(data);\r\n        });\r\n    });\r\n}\r\n\r\n// callback function to call\r\nfunction callback(data){\r\n    console.log(data);\r\n}\r\n\r\n// calling the function\r\nharshReads().then(callback).catch(err => console.log(err));"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// BAD EXAMPLE\r\n\r\nfunction harshAsyncFunction(){\r\n    let p = new Promise((resolve, reject) => {\r\n        if(true){\r\n            resolve('success');\r\n        }else{\r\n            reject('failure');\r\n        }\r\n    });\r\n\r\n    return p;\r\n}\r\n\r\nconst value = harshAsyncFunction();\r\n\r\nvalue.then((data) => {\r\n    console.log(data);\r\n}).catch((err) => {\r\n    console.log(err);\r\n});"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// GOOD EXAMPLE\r\n\r\n// new way\r\nfunction harshAsyncFunction(){\r\n    let p = new Promise(function(resolve){\r\n        setTimeout(resolve, 4000);\r\n    });\r\n    return p;\r\n}\r\n\r\nconst value = harshAsyncFunction();\r\nvalue.then(()=>{\r\n    console.log('success');\r\n})\r\n\r\n\r\n// old way\r\nfunction harshAsyncFunction(callback){\r\n    setTimeout(callback, 4000);\r\n}\r\n\r\nharshAsyncFunction(function(){\r\n    console.log('success');\r\n})"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "success",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "function harshAsyncFunction(){\r\n    let p = new Promise(function(resolve, reject){\r\n        setTimeout(()=>{\r\n            resolve('success');\r\n        }, 2000)\r\n    });\r\n\r\n    return p;\r\n}\r\n\r\nasync function harsh(){\r\n    const value = await harshAsyncFunction();\r\n    console.log(value);\r\n}\r\n\r\nharsh();\r\n"
            ],
            "outputs": []
        }
    ]
}